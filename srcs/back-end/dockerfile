###################
# BUILD FOR LOCAL DEVELOPMENT
###################

FROM node:18-alpine As development

# Create app directory

WORKDIR /usr/src/app/

# Copy application dependency manifests to the container image.
# A wildcard is used to ensure copying both package.json AND package-lock.json (when available).
# Copying this first prevents re-running npm install on every code change.


# Install app dependencies using the `npm ci` command instead of `npm install`
#RUN npm install -g @nestjs/cli

#RUN npm i -> useless, no package.json in container before directory is mounted

COPY ./server_launch.sh .

COPY package*.json ./

COPY /prisma /usr/src/app

CMD ["sh", "server_launch.sh"]

###################
# BUILD FOR PRODUCTION
###################

FROM node:18-alpine As build

WORKDIR /usr/src/app/

COPY package*.json ./

COPY prisma ./prisma/

RUN npx prisma generate

RUN npm ci

COPY . .

# Run the build command which creates the production bundle
RUN npm run build

# Set NODE_ENV environment variable
ENV NODE_ENV production

# Running `npm ci` removes the existing node_modules directory and passing in --only=production ensures that only the production dependencies are installed. This ensures that the node_modules directory is as optimized as possible
RUN npm ci --only=production && npm cache clean --force

###################
# PRODUCTION
###################


FROM node:18-alpine As production

# Copy the bundled code from the build stage to the production image
COPY --from=build /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/dist ./dist
COPY --from=build package*.json ./

# Start the server using the production build
CMD [ "node", "dist/main.js" ]