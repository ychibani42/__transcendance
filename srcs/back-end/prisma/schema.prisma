// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Set the DATABASE_URL in the .env file to point to your existing database. If your database has no tables yet, read https://pris.ly/d/getting-started
// 2. Set the provider of the datasource block in schema.prisma to match your database: postgresql, mysql, sqlite, sqlserver, mongodb or cockroachdb.
// 3. Run prisma db pull to turn your database schema into a Prisma schema.
// 4. Run prisma generate to generate the Prisma Client. You can then start querying your database.

generator client {
  provider = "prisma-client-js" //	indique a prisma quel type de requete il va envoyer a la base de donnee pour communiquer avec la base de donnees, en javascript comme on utilise un application en javascript
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // on dit qu'on utilise prisma et que pour y acceder on utilise l'url du .env
}

enum State {
  Disconected
  Online
  Afk
  OnGame
}

model User {
  id            Int       @id @unique @default(autoincrement())
  avatar	      String?

  id42          Int       @unique
  name          String?   @unique

  state         State     @default(Disconected)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profilefinish Boolean   @default(false)
  
  otpenable     Boolean   @default(false)
  otpvalider    Boolean   @default(false)
  otpcode       String    @default("")

  friends       Friends[]
  channels      Channel[] @relation("chan/user")
  game1         Game[]    @relation("User1")
  game2         Game[]    @relation("User2")
  dm1           DM[]      @relation("msg1")
  dm2           DM[]      @relation("msg2")
  blockedUsers  BlockedU[]
  banned        Banned[]
  muted         Muted[]
  admin         Admin[]
}


model Game {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  score       Int[]
  player1     Int
  player2     Int
  user1       User      @relation("User1", fields: [player1], references: [id])
  user2       User      @relation("User2", fields: [player2], references: [id])
  
}

model Channel {
  id          Int       @id @unique @default(autoincrement())
  is_private  Boolean
  password    String
  locked      Boolean   @default(false)    
  channelName String    @unique     
  adminUsers  Admin[] 
  ownerId     Int
  user        User[]    @relation("chan/user")
  messages    Message[] // Define the relation with Message
  bannedUsers Banned[]
  mutedUsers  Muted[] 
  dm		  	  Boolean
}

model DM {
  id        Int         @id @unique @default(autoincrement())
  blocked   Boolean
  dm1       Int
  dm2       Int
  name      String
  user1     User        @relation("msg1", fields: [dm1], references: [id])
  user2     User        @relation("msg2", fields: [dm2], references: [id])
  messages  Message[]
}

model Message {
  id        Int      @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  text      String
  channelId Int?
  channel   Channel?  @relation(fields: [channelId], references: [id])
  dm        DM?       @relation(fields: [dmId], references: [id])
  dmId      Int?
  userId    Int  
  name      String
}

model BlockedU {
  id            Int       @id @unique @default(autoincrement())
  createdAt     DateTime  @default(now())
  userBloqued   Int
  user          User      @relation(fields: [userId], references: [id])
  userId        Int
}

model Friends {
  id          Int       @id @unique @default(autoincrement())
  createdAt   DateTime  @default(now())
  userFriend  Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model Muted {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  duration  Int
  userId    Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  channelId Int
}

model Admin {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  userId    Int
  channel   Channel   @relation(fields: [channelId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  channelId Int
}

model Banned {
  id        Int       @id @unique @default(autoincrement())
  createdAt DateTime  @default(now())
  channel   Channel   @relation(fields: [channelId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  channelId Int
}
